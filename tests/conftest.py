import pytest
import asyncio

from datetime import datetime
from unittest.mock import AsyncMock, patch
from httpx import AsyncClient, ASGITransport
from pytest_mock import MockerFixture
from sqlalchemy import text

from app.database import engine, MODE, AsyncSessionLocal
from app.main import app
from app.models import Base


@pytest.fixture(autouse=True)
async def clean_db(setup_db, session):
    """ –û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º """

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    result = await session.execute(text("SELECT * FROM spimex_trading_results"))
    records = result.fetchall()
    print(f"üå± –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π: {records}")

    print("üîÅ –û—Ç—á–∏—Å—Ç–∫–∞ –ë–î –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º")
    await session.execute(text("TRUNCATE TABLE spimex_trading_results RESTART IDENTITY CASCADE;"))
    await session.commit()

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    result = await session.execute(text("SELECT * FROM spimex_trading_results"))
    records = result.fetchall()
    print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞. –ó–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {records}")


@pytest.fixture(scope="session")
def event_loop():
    """ –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ event loop –¥–ª—è –≤—Å–µ—Ö async-—Ç–µ—Å—Ç–æ–≤ """
    loop = asyncio.new_event_loop()
    yield loop
    loop.close()


@pytest.fixture
async def populate_db(session):
    """ –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î """
    from app.models import SpimexTradingResult
    from datetime import date, datetime

    print("üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")

    test_data = [
        SpimexTradingResult(
            exchange_product_id="1",
            exchange_product_name="–ù–µ—Ñ—Ç—å",
            oil_id="OIL1",
            delivery_basis_id="DB1",
            delivery_basis_name="–ë–∞–∑–∏—Å 1",
            delivery_type_id="DT1",
            volume=1000.0,
            total=500000.0,
            count=10,
            date=date(2025, 4, 3),
            created_at=datetime.now(),
            updated_at=datetime.now()
        ),
        SpimexTradingResult(
            exchange_product_id="2",
            exchange_product_name="–î–∏–∑–µ–ª—å",
            oil_id="OIL1",
            delivery_basis_id="DB2",
            delivery_basis_name="–ë–∞–∑–∏—Å 2",
            delivery_type_id="DT2",
            volume=800.0,
            total=400000.0,
            count=8,
            date=date(2025, 4, 2),
            created_at=datetime.now(),
            updated_at=datetime.now()
        ),
        # –≠—Ç–∞ –∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—Ç—å —Ñ–∏–ª—å—Ç—Ä—É
        SpimexTradingResult(
            exchange_product_id="3",
            exchange_product_name="–ì–∞–∑",
            oil_id="OIL2",
            delivery_basis_id="DB3",
            delivery_basis_name="–ë–∞–∑–∏—Å 3",
            delivery_type_id="DT3",
            volume=900.0,
            total=450000.0,
            count=9,
            date=date(2025, 4, 3),
            created_at=datetime.now(),
            updated_at=datetime.now()
        ),
    ]

    session.add_all(test_data)
    await session.commit()
    print("‚úÖ –ë–î –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")


@pytest.fixture(autouse=True)
async def setup_db():
    assert MODE == "TEST"
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)
        await conn.run_sync(Base.metadata.create_all)

    yield

    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)


@pytest.fixture
async def session():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    async with AsyncSessionLocal() as session:
        yield session


@pytest.fixture
async def client():
    transport = ASGITransport(app=app)
    async with AsyncClient(transport=transport, base_url="http://test") as client:
        yield client


@pytest.fixture
def mock_spimex_response():
    """ –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-–æ—Ç–≤–µ—Ç–∞ """

    mock_response = AsyncMock()
    mock_response.__aenter__.return_value = mock_response  # –≠—Ç–æ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞

    async def mock_iter_chunked(size):
        """ –ú–æ–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è iter_chunked """
        yield b'chunk1'
        yield b'chunk2'

    mock_response.content.iter_chunked = mock_iter_chunked
    return mock_response


@pytest.fixture
def test_url():
    """ –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ URL """

    test_date = datetime.today().strftime("%Y%m%d")
    return f"https://spimex.com/upload/reports/oil_xls/oil_xls_{test_date}162000.xls"


@pytest.fixture
def mock_cache(mocker: MockerFixture):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞"""

    mock_get = mocker.patch("app.routes.get_cached_data", autospec=True)
    mock_set = mocker.patch("app.routes.set_cached_data", autospec=True)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    mock_get.return_value = None
    mock_set.return_value = None

    return mock_get, mock_set


@pytest.fixture
def mock_spimex_dependencies():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ fetch_and_parse_data"""

    with patch("app.services.find_latest_spimex_report", new_callable=AsyncMock) as mock_find_reports, \
            patch("app.services.download_spimex_report", new_callable=AsyncMock) as mock_download, \
            patch("app.services.parse_spimex_xlsx", new_callable=AsyncMock) as mock_parse:
        print(f"Mocking dependencies: {mock_find_reports}, {mock_download}, {mock_parse}")
        yield mock_find_reports, mock_download, mock_parse
