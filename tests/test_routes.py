import pytest

from pytest_mock import MockFixture
from sqlalchemy import text

from app.cache import clear_cache


@pytest.mark.parametrize(
    "params, expected_status_code, expected_json",
    [
        # –¢–µ—Å—Ç –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
        ({"n": 2}, 200, {"message": "–ü—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Ñ–æ–Ω–µ –¥–ª—è 2 —Ñ–∞–π–ª–æ–≤"}),

        # –¢–µ—Å—Ç –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        (None, 422, None),

        # –¢–µ—Å—Ç –Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        ({"n": 31}, 422, None),
    ]
)
async def test_fetch_data(client, mocker: MockFixture, params, expected_status_code, expected_json):
    """ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ fetch_data """

    # –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if params and "n" in params and params["n"] <= 30:
        mocker.patch("app.routes.fetch_and_parse_data")

    response = await client.post("/fetch_data/", params=params)

    assert response.status_code == expected_status_code
    if expected_json:
        assert response.json() == expected_json


@pytest.mark.parametrize(
    "params, expected_status_code, expected_json",
    [
        ({"count": 5}, 200, []),  # –ü—É—Å—Ç–∞—è –ë–î
        ({"count": 5}, 200, ["2025-04-03", "2025-04-02"]),  # –î–∞–Ω–Ω—ã–µ –≤ –ë–î
        ({"count": 5}, 200, ["2025-04-03", "2025-04-02"]),  # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        ({"count": 1000}, 200, ["2025-04-03", "2025-04-02"]),  # –ë–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ count
    ]
)
async def test_test_get_last_trading_dates(
        client, session, populate_db, mock_cache, params, expected_status_code, expected_json
):
    """ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ get_last_trading_dates """

    # –ï—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞
    result = await session.execute(text("SELECT COUNT(*) FROM spimex_trading_results"))
    count = result.scalar()

    if expected_json == [] and count > 0:  # –ï—Å–ª–∏ –≤ –ë–î –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –æ—á–∏—â–∞–µ–º
        await session.execute(text("DELETE FROM spimex_trading_results"))
        await session.commit()
        print("üî• –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")

    await clear_cache()

    response = await client.get("/get_last_trading_dates/", params=params)

    assert response.status_code == expected_status_code
    assert response.json() == expected_json


@pytest.mark.parametrize(
    "params, expected_status_code, expected_length, expected_oil_id",
    [
        # –¢–µ—Å—Ç –Ω–∞ –ø—É—Å—Ç–æ–π –∫—ç—à
        ({"start_date": "01-01-2025", "end_date": "31-12-2025", "oil_id": "OIL1", "limit": 10, "offset": 0},
         200, 2, "OIL1"),

        # –¢–µ—Å—Ç –Ω–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        ({"start_date": "01-01-2025", "end_date": "31-12-2025", "oil_id": "OIL1", "limit": 10, "offset": 0},
         200, 2, "OIL1"),

        # –¢–µ—Å—Ç –Ω–∞ —Ñ–∏–ª—å—Ç—Ä—ã
        ({"start_date": "01-01-2025", "end_date": "31-12-2025", "oil_id": "OIL2", "limit": 10, "offset": 0},
         200, 1, "OIL2"),

        # –¢–µ—Å—Ç –Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        ({"start_date": "01-01-2025", "end_date": "31-12-2025", "oil_id": "OIL1", "limit": 1, "offset": 0},
         200, 1, "OIL1"),
    ]
)
async def test_get_dynamics(
        client, populate_db, mock_cache, params, expected_status_code, expected_length, expected_oil_id
):
    """ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ get_dynamics """

    mock_get, mock_set = mock_cache or (None, None)

    response = await client.get("/get_dynamics/", params=params)

    assert response.status_code == expected_status_code
    assert len(response.json()) == expected_length

    if expected_length > 0:
        assert response.json()[0]["oil_id"] == expected_oil_id

    mock_set.assert_called_once()


@pytest.mark.parametrize(
    "params, expected_status_code, expected_length, expected_oil_id, expected_delivery_type_id, expected_delivery_basis_id",
    [
        # –¢–µ—Å—Ç –Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        ({"oil_id": "OIL1", "delivery_type_id": "DT1", "delivery_basis_id": "DB1", "limit": 10, "offset": 0},
         200, 1, "OIL1", "DT1", "DB1"),

        # –¢–µ—Å—Ç –Ω–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        ({"start_date": "01-01-2025", "end_date": "31-12-2025", "oil_id": "OIL1", "limit": 10, "offset": 0},
         200, 2, "OIL1", None, None),

        # –¢–µ—Å—Ç –Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        ({"oil_id": "OIL1", "limit": 1, "offset": 0}, 200, 1, "OIL1", None, None),  # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å
        ({"oil_id": "OIL1", "limit": 1, "offset": 1}, 200, 1, "OIL1", None, None),  # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–ø–∏—Å—å

        # –¢–µ—Å—Ç –Ω–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        ({"oil_id": "OIL3", "limit": 10, "offset": 0}, 200, 0, None, None, None)
    ]
)
async def test_get_trading_results(
        client, populate_db, mock_cache, params, expected_status_code, expected_length, expected_oil_id,
        expected_delivery_type_id, expected_delivery_basis_id
):
    """ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ get_trading_results """

    mock_get, mock_set = mock_cache or (None, None)

    response = await client.get("/get_trading_results/", params=params)

    assert response.status_code == expected_status_code
    assert len(response.json()) == expected_length

    if expected_length > 0:
        assert response.json()[0]["oil_id"] == expected_oil_id
        if expected_delivery_type_id:
            assert response.json()[0]["delivery_type_id"] == expected_delivery_type_id
        if expected_delivery_basis_id:
            assert response.json()[0]["delivery_basis_id"] == expected_delivery_basis_id

    mock_set.assert_called_once()
